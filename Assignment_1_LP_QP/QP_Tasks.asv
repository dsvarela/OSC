%% Everything about this program seems fine.
close all
clc

%% Parameter Definition
% Daniel Salgado Varela - 5321263
D_a1 = 2; D_a2 = 6; D_a3 = 3;

% Rohan Chandrashekar - 5238382
D_b1 = 3; D_b2 = 8; D_b3 = 2;

%Parameter Definition
E1 = D_a1 + D_b1;
E2 = D_a2 + D_b2;
E3 = D_a3 + D_b3;

clear D_a1 D_a2 D_a3 D_b1 D_b2 D_b3

%% Loading Data
measurements = table2array(readtable('measurements.csv', 'HeaderLines',1));

delta_t = 3600;
q_dot_occ = measurements(:,1);  % kW
q_dot_ac = measurements(:,2);  % kW
q_dot_vent = measurements(:,3);  % kW
q_dot_solar = measurements(:,4);  % kW
T_amb = measurements(:,5);  % ºC
T_b = measurements(:,6);  % ºC
Phi = measurements(:,7);  % Eur/KWh

clear measurements

%% Task 3
N = 2159;
Y = zeros(N,1);
phi = zeros(N,3);
for i = 1:2159
Y(i) = T_b(i+1) - T_b(i);
phi(i,:) = delta_t * [q_dot_solar(i) q_dot_occ(i)+q_dot_ac(i)-q_dot_vent(i) T_amb(i)-T_b(i)];
end

H3 = 2 * (phi)' * (phi);
c3 = (-2 * Y' * phi)';

[x3,fval3,exitflag3] = quadprog(H3,c3);
a1 = x3(1);
a2 = x3(2);
a3 = x3(3);

A = 1-a3 * delta_t;
B = delta_t * [a1 a2 a2 -a2 a3];

mse = 0;
for i = 1:2159
    s1 = A * T_b(i);
    s2 = B*[q_dot_solar(i); q_dot_occ(i) ; q_dot_ac(i) ; q_dot_vent(i); T_amb(i)];
    mse = mse + (T_b(i+1) - (s1 + s2))^2;
end

clear mse

%% Task 4 as Described in Section 4.2.
N = 2160;
T_b1= 22.43; % Given Temperature at step 1
q_ac_max = 100; % Maximum Power o
T_min = 15;
T_max = 28;
T_ref = 22;

Phi = Phi/delta_t; %convert to KWs, so it makes sense for delta_t = 3600s

var  = (E2+1)/10;
H = [2*var*eye(N-1), zeros(N-1,N); zeros(N, N-1), zeros(N)];
c = [-2*var*T_ref*ones(1,N-1), Phi'*delta_t]';

% Lower and Upper Bound Constraints
lb = [T_min * ones(1,N-1), zeros(1,N)]';
ub = [T_max * ones(1,N-1), q_ac_max * ones(1,N)]';

for o = 1:length(q_dot_occ)-1
    if q_dot_occ(o+1) <= 0
        lb(o) = -inf;
        ub(o) = inf;
    end
end

% Equality Constraints
Aeq_alt = zeros(N-1, 2*N-1);
beq_alt = zeros(N-1,1);
Aeq_alt(1,1) = 1;
Aeq_alt(1,N) = - a2*delta_t;
beq_alt(1) = (1-a3*delta_t)*T_b1 + delta_t * (a1*q_dot_solar(1) + a2*(q_dot_occ(1) - q_dot_vent(1)) + a3 * T_amb(1));
for i = 2:N-1
    Aeq_alt(i,i-1) = a3*delta_t - 1;
    Aeq_alt(i,i) = 1;
    Aeq_alt(i, N+i-1) = - a2*delta_t;
    beq_alt(i) = delta_t * (a1*q_dot_solar(i) + a2*(q_dot_occ(i) - q_dot_vent(i)) + a3 * T_amb(i));
end

A = [eye(N),zeros(N); -eye(N),zeros(N); zeros(N),eye(N); zeros(N),-eye(N)];
b = [T_max*ones(1,N), -T_min*ones(1,N), q_ac_max*ones(1,N) , zeros(1,N)];

options = optimoptions('quadprog', 'MaxIterations', 500);
[x4,~] = quadprog(H,c,[],[],Aeq_alt,beq_alt,lb,ub,[],options);

%% Task 4 as Described in Section 4.3.
% 
% % Auxiliary Variables
% var = (E2+1)/10;
% D = (A*Phi/a2 + 2*var*T_ref);
% 
% % Linear constants vector construction
% c_alt = zeros(1,N);
% for i = 1:N-2
%     c_alt(i) = Phi(i)/a2 - D(i+1);
% end
% c_alt(end-1) = Phi(N-1)/a2 - 2*var*T_ref;
% c_alt(end)= Phi(N)*delta_t;
% 
% % Quadratic constants vector construction
% H_alt= [2*var*eye(N-1), zeros(N-1,1); zeros(1,N)];
% 
% % Lower and Upper Bound Constraints
% lb_alt = [T_min * ones(1,N-1), 0]';
% ub_alt = [T_max * ones(1,N-1), q_ac_max]';
% 
% for o = 2:length(q_dot_occ)
%     if q_dot_occ(o) <= 0
%         lb_alt(o) = -inf;
%         ub_alt(o) = inf;
%     end
% end
% 
% % Inequalites matrices construction (done in two separate matrices that 
% % are then joined in the end)
% % for -qack < 0
% A_ineq_min = zeros(N,N);
% b_ineq_min = zeros(1,N);
% 
% % for qack < 100
% A_ineq_max = zeros(N,N);
% b_ineq_max = zeros(1,N);
% for i =  1:N-1
%     if i == 1
%         A_ineq_min(i,i) = 1/(delta_t*abs(a2));
%         b_ineq_min(i) = q_dot_vent(i+1) - q_dot_occ(i+1) + abs(a1/a2)*q_dot_solar(i+1) - abs(a3/a2)*T_amb(i+1) + T_b1*(1+abs(a3)*delta_t)/(delta_t*abs(a2));
%         
%         A_ineq_max(i,i) = -1/(delta_t*abs(a2));
%         b_ineq_max(i) = 100 - q_dot_vent(i+1) + q_dot_occ(i+1) - abs(a1/a2)*q_dot_solar(i+1) + abs(a3/a2)*T_amb(i+1) -T_b1*(1+abs(a3)*delta_t)/(delta_t*abs(a2));
%     else
%         A_ineq_min(i,i-1) = -(1+abs(a3)*delta_t)/(delta_t*abs(a2));
%         A_ineq_min(i,i) = 1/(delta_t*abs(a2));
%         b_ineq_min(i) = q_dot_vent(i+1) - q_dot_occ(i+1) + abs(a1/a2)*q_dot_solar(i+1) - abs(a3/a2)*T_amb(i+1);
%         
%         A_ineq_max(i,i-1) = (1+abs(a3)*delta_t)/(delta_t*abs(a2));
%         A_ineq_max(i,i) = -1/(delta_t*abs(a2));
%         b_ineq_max(i) = 100 - q_dot_vent(i+1) + q_dot_occ(i+1) - abs(a1/a2)*q_dot_solar(i+1) + abs(a3/a2)*T_amb(i+1);
%     end
% end
% A_ineq_min(N,N) = -1;
% b_ineq_min(N) = 0;
% A_ineq_max(N,N) = 1;
% b_ineq_max(N) = 100;
% 
% A_ineq = [A_ineq_min; A_ineq_max];
% b_ineq = [b_ineq_min, b_ineq_max]';
% 
% % Solution to the problem
% options = optimoptions('quadprog', 'MaxIterations', 300);
% [x4_alt,~] = quadprog(H_alt,c_alt,A_ineq,b_ineq,[],[],lb_alt,ub_alt,[],options);

%% Graphing of the Results
T_b_opt = [T_b1 , x4(1:N-1)']';
q_dot_ac_opt = x4(N:end);

hours = 1:N;
figure;
subplot(2,1,1);
plot(hours, T_b_opt);
title('Plot of the Optimized Values for the Building''s Temperature over a Horizon of N=2160 Steps.','Fontsize', 20);
xlabel('Time [h]', 'Fontsize', 14);
ylabel('Temperature [ºC]', 'Fontsize', 14, 'fontweight','bold');
legend({'$T_b$'}, 'Location','northeast', 'Interpreter', 'Latex', 'Fontsize', 20);
set(gca, 'Fontsize', 14)
grid on
subplot(2,1,2);
plot(hours, q_dot_ac_opt);
title('Plot of the Optimized Values for the Building''s Air-Conditioning Power over a Horizon of N=2160 Steps.', 'Fontsize', 20);
legend({'$\dot{q}_{ac}$'}, 'Location','northeast', 'Interpreter', 'Latex', 'Fontsize', 20);
xlabel('Time [h]', 'Fontsize', 14, 'fontweight','bold');
ylabel('Power [kW]', 'Fontsize', 14, 'fontweight','bold');
set(gca, 'Fontsize', 14)
grid on
%% Sum to obtain cost functions

Tbp1 = T_b_opt(1-a3*delta_t) + delta_t(a1*q_dot_solar + a2(q_dot_occ - q_dot_vent+ q_dot_ac_opt) + a3*T_amb);
cost_per_step = zeros(1,N);
total_cost_fn = 0;
for i=1:2160
cost_per_step(i) = q_dot_ac_opt(i)*Phi(i)*delta_t +(E2+1)/10 * (T_b_opt(i)-T_ref)^2;
total_cost_fn = total_cost_fn + cost_per_step(i);
end
figure;
plot(hours, cost_per_step)
title('Plot of the Cost of Air-Conditioning for the Building over a Horizon of N=2160 Steps.', 'Fontsize', 20);
legend({'$Price$'}, 'Location','northeast', 'Interpreter', 'Latex', 'Fontsize', 20);
xlabel('Time [h]', 'Fontsize', 14, 'fontweight','bold');
ylabel('Price [€]', 'Fontsize', 14, 'fontweight','bold');
set(gca, 'Fontsize', 14)
grid on